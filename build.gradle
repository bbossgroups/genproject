def profile = System.getProperty("profile") ?: "dev"
configure(allprojects) { project ->
	group = PROJ_GROUP
	version = PROJ_VERSION	
	ext.bboss_version=PROJ_BBOSS_VERSION
	apply plugin: "java"
	apply plugin: "maven-publish"
	apply plugin: "eclipse"
	apply plugin: "idea"
	apply plugin: "signing"
	apply plugin: "java-library"
	eclipse {
		jdt {
			//if you want to alter the java versions (by default they are configured with gradle java plugin settings):
			sourceCompatibility = SOURCE_COMPILER_LEVEL
			targetCompatibility = TARGET_COMPILER_LEVEL
			//javaRuntimeName = "../../org.eclipse.jdt.launching.JRE_CONTAINER"

		}
	}

	tasks.withType(JavaCompile) {
		
		sourceCompatibility = SOURCE_COMPILER_LEVEL
		targetCompatibility = TARGET_COMPILER_LEVEL
		options.encoding = 'UTF-8'
	}

	tasks.withType(Javadoc) {
		
		
		options.encoding = 'UTF-8'
	}

	jar {
		manifest {
			attributes (
					'Implementation': archiveVersion,
					'Specification-Version': archiveVersion,
					'Implementation-Vendor': 'bbossgroups',
					'Implementation-ProductID': project.name,
					'Compile-Timestamp': new Date().format('yyyy-MM-dd HH:mm:ss'),
					'Compile-User': DEVELOPER_NAME
			)
		}
	}


	dependencies {
		testImplementation 'junit:junit:4.13.1'
		
		 
	}

	repositories {
		mavenLocal()

		mavenCentral()
		
		
	}
	if(project.getProperty('skipTest').equals("true"))
	{
		compileTestJava.enabled=false
		processTestResources.enabled=false
		testClasses.enabled = false
		test.enabled = false  
	}
}



sourceSets {
	main {
		java {
			srcDir 'src'

		}

		resources {
			srcDir 'resources'
		}



//			compileClasspath = configurations.compile + configurations.runtime
	}


}


dependencies {
    api(
            [group: 'org.apache.logging.log4j', name: 'log4j-api', version: "${log4j2_version}", transitive: false],
            [group: 'org.apache.logging.log4j', name: 'log4j-core', version: "${log4j2_version}", transitive: false],
            [group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: "${log4j2_version}", transitive: true],
    )
    api (
    
             
             [group: 'com.bbossgroups', name: 'bboss-core', version: "${bboss_version}", transitive: true],
             [group: 'com.bbossgroups', name: 'bboss-velocity', version: "${bboss_version}", transitive: true],
             
              [group: 'oro', name: 'oro', version: '2.0.8', transitive: false],
              [group: 'commons-lang', name: 'commons-lang', version: '2.6', transitive: false],
              //[group: 'commons-logging', name: 'commons-logging', version: '1.1', transitive: false],
            [group: 'commons-collections', name: 'commons-collections', version: '3.2.2', transitive: false],
             [group: 'com.fasterxml.uuid', name: 'java-uuid-generator', version: '4.3.0', transitive: false],
              
             [group: 'commons-io', name: 'commons-io', version: '2.18.0', transitive: false],
//           	[group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.36', transitive: true],


	            
    )

	api(
		[group: 'com.bbossgroups', name: 'bboss-bootstrap-rt', version: "${bboss_version}", transitive: true],
    )
}

// 创建可解析的配置
configurations {
    apiResolvable {
        canBeResolved = true
        extendsFrom api
    }
    compileOnlyResolvable {
        canBeResolved = true
        extendsFrom compileOnly
    }

    runtimeOnlyResolvable {
        canBeResolved = true
        extendsFrom runtimeOnly
    }
}
tasks.register('copyJarFiles', Sync) {
    dependsOn 'jar'
    from configurations.apiResolvable {
    }
    from jar.outputs
    exclude { details -> details.file.name.startsWith('bboss-rt') }
    into 'build/dist/lib'

}
tasks.register('copyDemoFiles', Copy) {
    from fileTree(dir: 'demo')
    into 'build/dist/demo'
}

tasks.register('copyRTJarFiles', Copy) {
    dependsOn 'copyJarFiles'

    from configurations.apiResolvable {
    }
    include { details -> details.file.name.startsWith('bboss-rt') }
    into 'build/dist'
    rename("bboss-rt-${bboss_version}.jar", "${project.name}-${bboss_version}.jar")
}
tasks.register('copyToolFiles', Copy) {
    dependsOn 'copyRTJarFiles'

    from('runfiles')
            {
                expand(
                        bboss_version: "${bboss_version}",
                        project: "${project.name}"
                )

            }
    filteringCharset = 'UTF-8'
    into 'build/dist/'


}
tasks.register('copyResourcesfiles', Sync) {
    from fileTree(dir: 'resources')
    filteringCharset = 'UTF-8'
    into 'build/dist/resources'
}

tasks.register('releaseVersion', Zip) {
    dependsOn 'copyToolFiles', 'copyDemoFiles', 'copyResourcesfiles'

    //appendix = 'wrapper'
    archiveClassifier = 'released'
    from 'build/dist/'

}

 
 